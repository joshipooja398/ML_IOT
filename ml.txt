================ Naive Bayes ==============

import numpy as np
import pandas as pd

Data = pd.read_csv('play_data.csv')
Data.head()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
data['outlook'] = le.fit_transform(data['outlook'])
data['temp'] = le.fit_transform(data['temp'])
data['humidity'] = le.fit_transform(data['humidity'])
data['wind'] = le.fit_transform(data['wind'])
data['play'] = le.fit_transform(data['play'])

x = data[['outlook','temp','humidity','wind']].values
y = data['play'].values

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x ,y, test_size=0.3)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.fit_transform(x_test)

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(x_train,y_train)

y_pred = model.predict(X_test)
y_pred

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_pred)*100
acc

y_new=model.predict([[2,0,0,0]])
if y_new == 1:
  print("play Game")
else:
  print ("do not play Game")

======================  KNN  ========================
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 3)
classifier.fit(x_train,y_train)

======================= Linear Regression ============================

#prepare model
from sklearn.linear_model import LinearRegression
model = LinearRegression()

#train model
model.fit(xtrain,ytrain)

#prediction
ypred = model.predict(xtest)
ypred 

from sklearn.metrics import r2_score
r2 = r2_score(ytest,ypred)
r2

accu = []
for i in range(1,101):
  xtrain,xtest, ytrain, ytest = train_test_split(x, y, train_size=0.80, random_state = i)
  model = LinearRegression()
  model.fit(xtrain, ytrain)
  ypred = model.predict(xtest)
  r2 = r2_score(ytest, ypred)
  accu.append(r2)

import numpy as np
acc_array = np.array(accu)
acc_array

acc_array.max()
acc_array.argmax()

============== Graph for Linear =============
def lin_reg_fn():
  plt.scatter(x,y, color='red')
  plt.plot(x, model.predict(x), color='blue')
  plt.title('Linear Regression line')
  plt.show()
  return
lin_reg_fn()
lin_reg.predict([[5.5]])

======================== Polynomial Regression =========================
#ploynomial regression
from sklearn.preprocessing import PolynomialFeatures
poly_reg=PolynomialFeatures(degree=4)
x_poly=poly_reg.fit_transform(X)

pol_reg_model=LinearRegression()
pol_reg_model.fit(x_poly, y)

#graph
def poly_reg_fn():
  plt.scatter(x,y, color='red')
  plt.plot(x, pol_reg_model.predict(poly_reg.fit_transform(X)), color='blue')
  plt.title('Polynomial Regression')
  plt.show()
  return
poly_reg_fn()

pol_reg_model.predict(poly_reg.fit_transform([[5.5]]))